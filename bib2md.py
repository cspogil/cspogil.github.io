"""Parse all BibTeX files and generate Markdown for each entry."""

import glob
import os

from hooks.short import abbreviate, parse_entry, write_entry

WARN = "<!-- DO NOT EDIT THIS FILE (automatically generated by bib2md.py) -->"


def reformat_authors(author_string):
    """Convert author string to "First Last" format, separated by commas."""
    authors = author_string.split(" and ")
    reformatted = []
    for author in authors:
        if "," in author:
            last, first = [part.strip() for part in author.split(",", 1)]
            reformatted.append(f"{first} {last}")
        else:
            # Already in "First Last" format
            reformatted.append(author.strip())
    return ", ".join(reformatted)


def get_fields(entry):
    """Extract common fields used in references and summary tables."""
    fields = entry.fields_dict
    author = fields["author"].value
    author = reformat_authors(author)
    year = fields["year"].value
    title = fields["title"].value

    # Get the source in order of priority
    source = None
    for fkey in ["series", "booktitle", "journal", "publisher", "howpublished"]:
        if fkey in fields:
            source = fields[fkey].value
            break

    # Format in italics or default to url
    if source:
        source = f"*{source}*"
        # if entry.entry_type.startswith("in"):
        #     source = "In " + source
    else:
        url = fields["url"].value
        abbr = abbreviate(url)
        source = f"[{abbr}]({url})"

    return author, year, title, source


def gen_md_file(path, entry):
    """Generate a Markdown file for the entry (publication)."""

    # Create a reference format string
    author, year, title, source = get_fields(entry)
    ref = f"{author}. ({year}). {title}."
    if source:
        ref += f" {source}."

    # Rename files to match the key
    name = os.path.basename(path)
    if name != entry.key + ".bib":
        new_name = entry.key + ".bib"
        new_path = path[:-len(name)] + new_name
        os.rename(path, new_path)
        md_path = path[:-3] + "md"
        if os.path.exists(md_path):
            os.rename(md_path, new_path[:-3] + "md")
        path = new_path
        name = new_name

    # Generate corresponding Markdown file
    with open(path[:-3] + "md", "w") as file:
        file.write("---\nhide:\n  - toc\n---\n\n")
        file.write(WARN + "\n\n")
        file.write(f"# {title}\n\n")
        file.write(f"**Reference:** {ref}\n\n")
        file.write('<div class="grid" markdown="1">\n\n')
        file.write(f"**Entry Key:** `#!tex \\cite{{{entry.key}}}`\n\n")
        file.write(f"**Entry Type:** `@{entry.entry_type}`\n\n")
        file.write("</div>\n")
        write_entry(entry, file)


def gen_table(path, entries_dict):
    """Generate a Markdown table for the given entires."""
    with open(path, "w") as file:
        file.write(WARN + "\n\n")
        file.write("Title | Author | Source | Year\n")
        file.write("------|--------|--------|-----\n")
        for href, entry in entries_dict.items():
            author, year, title, source = get_fields(entry)
            link = f"[{title}]({href})"
            file.write(f"{link} | {author} | {source} | {year}\n")


def main():
    """Generate md files and index pages."""
    acts = {}
    pubs = {}

    # Find and parse every bib file
    for path in sorted(glob.glob("docs/**/*.bib", recursive=True)):
        print(path)
        entry = parse_entry(path)
        if path.startswith("docs/research"):
            gen_md_file(path, entry)

            # Relative path from index page
            href = path[14:-4] + "/"
            pubs[href] = entry
        else:
            href = path[16:-4] + "/"
            acts[href] = entry

    # Generate the index pages
    gen_table("tables/activities.md", acts)
    gen_table("tables/research.md", pubs)


if __name__ == "__main__":
    main()
